<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Atent" xml:space="preserve">
    <value>Atention!</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ConfLeave" xml:space="preserve">
    <value>You really want to leave?</value>
  </data>
  <data name="ConnError" xml:space="preserve">
    <value>Error to connect. The database connection didn't work!</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error!</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="Leave" xml:space="preserve">
    <value>Leave</value>
  </data>
  <data name="Log" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="LogError" xml:space="preserve">
    <value>Wrong username or password!</value>
  </data>
  <data name="Lvl1" xml:space="preserve">
    <value>Level One</value>
  </data>
  <data name="Lvl10" xml:space="preserve">
    <value>Level Ten</value>
  </data>
  <data name="Lvl2" xml:space="preserve">
    <value>Level Two</value>
  </data>
  <data name="Lvl3" xml:space="preserve">
    <value>Level 2+1=TREE</value>
  </data>
  <data name="Lvl4" xml:space="preserve">
    <value>Level Four</value>
  </data>
  <data name="Lvl5" xml:space="preserve">
    <value>Level Five</value>
  </data>
  <data name="Lvl6" xml:space="preserve">
    <value>Level Six</value>
  </data>
  <data name="Lvl7" xml:space="preserve">
    <value>Level Seven</value>
  </data>
  <data name="Lvl8" xml:space="preserve">
    <value>Level Eight</value>
  </data>
  <data name="Lvl9" xml:space="preserve">
    <value>Level Nine</value>
  </data>
  <data name="LvlEnd" xml:space="preserve">
    <value>Level Zero</value>
  </data>
  <data name="Pass" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PassError" xml:space="preserve">
    <value>You must type your password!</value>
  </data>
  <data name="QuestLeave" xml:space="preserve">
    <value>Leave?</value>
  </data>
  <data name="Rights" xml:space="preserve">
    <value>Champignons © 2018 ALL RIGHTS RESERVERD</value>
  </data>
  <data name="User" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="UserError" xml:space="preserve">
    <value>You must type your username!</value>
  </data>
  <data name="Wel1" xml:space="preserve">
    <value>Welcome, </value>
  </data>
  <data name="Wel10" xml:space="preserve">
    <value>I think you can go now.</value>
  </data>
  <data name="Wel11" xml:space="preserve">
    <value>Finally, fuck me!</value>
  </data>
  <data name="Wel12" xml:space="preserve">
    <value>Finally, fuck you!!!</value>
  </data>
  <data name="Wel13" xml:space="preserve">
    <value>OH MY GOWD, FUCK YOU PIECE OF SHIT, GO AWAY OF HERE!</value>
  </data>
  <data name="Wel2" xml:space="preserve">
    <value>It's your birthday and that's beautifull!</value>
  </data>
  <data name="Wel3" xml:space="preserve">
    <value>Here, I preper a little game for you, the only thing you need to do is win the game.</value>
  </data>
  <data name="Wel4" xml:space="preserve">
    <value>If you reach the end, you will receive something, but you, and I, don't know what.</value>
  </data>
  <data name="Wel5" xml:space="preserve">
    <value>If you don't, go fuck yourself, ok?</value>
  </data>
  <data name="Wel6" xml:space="preserve">
    <value>Are you ready to go?</value>
  </data>
  <data name="Wel7" xml:space="preserve">
    <value>Ok, it's loading...</value>
  </data>
  <data name="Wel8" xml:space="preserve">
    <value>Ohh, fuck, I almost forgot.</value>
  </data>
  <data name="Wel9" xml:space="preserve">
    <value>For each 'level' you'll have a tip, but it's only appers if you click on the button in the screen.</value>
  </data>
</root>